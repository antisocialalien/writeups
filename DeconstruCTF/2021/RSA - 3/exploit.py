#!/usr/bin/python3

n = 0x01fb7e02ec6ba11db84b1eeb3da2a09f1d1e4dd9ee969675dbf8c3f9a826d8f5f6e3a169a056a29346ef19bfcd4a8e3950e77d6873cc78b5fd07e24cae3e39e0008d148d674470d9cd5b2ec4ae72737705bc8c6ad94a98fb0597bd7a83dda37975ea59d30d00b14e79bfd5817e72b035124ef02101b94b47e0b9319e6e2c0b5fbf6a54570246f09c71240a862b898998cad0c3ab5989679bc3b9d7cb70d1952e685860b456812724c8d3868de684d9177832b8f0d9f0c093a7bc18a09e02bdc38d954a686c0a92675fd522a0f1958336628ea1d74d701b35bf8ee72c83ef0da7e57ee2f1d76922e9cfa0ce840ed3648028cf32fee08e527cbd25cf37d749007c09
e = 0x011ef05c01b36ff6fec8fd989e68a8d9c447252390178c0fe2810716e2ccfbb873f2b74ff9697e5318492b7d13acf6b7a7230ec94e45dea3db80aee6c421ca78ee0e37e3a760e62d2d9b16d4cc5fcfcf3dc9246ab282685b56722530ff772309b655438cb9349f7cad3535d9b2cac0bbc72d0eb9d1dbf86b7352fe341f6adc4dee95a8fb95d29558e6a8af9e33de04a9794d5b31af06f2557763fb5863876a707367d4658d4b654021c9baf12bff5dd8b7197a27542bc21657ddb3804fc061b343b1bc2bb8b47dd623bd0d3107f7dcf43888cc8ffc6722463f91bf23e6509d2084ec53c57101dce4c74e4821ae78b7aa36fb6bd72987d0812c23797441cb082095

# https://sagi.io/crypto-classics-wieners-rsa-attack/
def continued_fractions(n, d):
    e = []
    q = n // d
    r = n % d
    e.append(q)
    while r != 0:
        n, d = d, r
        q = n // d
        r = n % d
        e.append(q)
    return e

# https://sagi.io/crypto-classics-wieners-rsa-attack/
def convergents(e):
    n = [] # Nominators
    d = [] # Denominators

    for i in range(len(e)):
        if i == 0:
            ni = e[i]
            di = 1
        elif i == 1:
            ni = e[i]*e[i-1] + 1
            di = e[i]
        else: # i > 1
            ni = e[i]*n[i-1] + n[i-2]
            di = e[i]*d[i-1] + d[i-2]

        n.append(ni)
        d.append(di)
        yield (ni, di)

if __name__ == "__main__":

    for k, d in convergents(continued_fractions(e, n)):
        if k == 0:
            continue
        m = 123456789
        if pow(pow(m, e, n), d, n) == m:
            print(f"possible d={d}")

