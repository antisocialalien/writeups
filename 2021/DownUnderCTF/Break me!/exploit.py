#!/usr/bin/python3

from pwn import *
from string import printable
from base64 import b64decode
from Crypto.Cipher import AES

BLOCK_SIZE = 16 

def connect():
    if args.REMOTE:
        con = remote('pwn-2021.duc.tf', 31914)
    else:
        con = process('./aes-ecb.py')
    con.recvline()
    return con

def get_blocks(con, payload):
    con.recvline()
    con.sendline(payload)
    blocks = b64decode(con.recvline())
    return [blocks[i:i+BLOCK_SIZE] for i in range(0, len(blocks), BLOCK_SIZE)]

def attack(con, key=b'!_SECRETSOURCE_'):
    try:
        while True:
            payload = b'A' * (BLOCK_SIZE - 1 - len(key))
            b1, b2, b3, _ = get_blocks(con, payload)

            for c in printable:
                print("", end=".")
                _, _, b, _ = get_blocks(con, payload + key + c.encode())

                if b == b3:
                    key += c.encode()
                    print(f"\nkey[{len(key)}] = {c}")
                    break

            if len(key) >= BLOCK_SIZE:
                print(f"key = {key}")
                cipher = AES.new(key, AES.MODE_ECB)
                flag = cipher.decrypt(b1 + b2)
                print(f"flag = {flag}")
                exit()
    except:
        con.close()
        con = connect()
        attack(con, key)

if __name__ == "__main__":
    con = connect()
    attack(con)

